from datetime import datetime, timezone
from math import log10, pow
import dateutil.parser

name = "impact"
version = "1.0.0"


def __gather_autor_contrib(pro_report):
    """
    The function gathers the author and contributor amounts that are needed to
    calculate the impact of the project

    :param    pro_report:  The project report

    :returns: A dict containing the number of authors and contributors or None
              if the information is not available
    """
    if ('author_contributor_counter' in pro_report
            and 'author#' in pro_report['author_contributor_counter']
            and 'contributor#' in pro_report['author_contributor_counter']):
        data = {}
        data['author#'] = pro_report[
            'author_contributor_counter']['author#']
        data['contributor#'] = pro_report[
            'author_contributor_counter']['contributor#']
        return data
    else:
        return None


def __gather_project_dates(pro_report):
    """
    The function gathers the first and last change dates that are needed to
    calculate the impact of the project

    :param    pro_report:  The project report

    :returns: A dict containing the dates of the first and last change or None
              if the information is not available
    """
    if ('project_dates' in pro_report
            and 'first_change' in pro_report['project_dates']
            and 'last_change' in pro_report['project_dates']):
        data = {}
        data['first_change'] = dateutil.parser.parse(
            pro_report['project_dates']['first_change'])
        data['last_change'] = dateutil.parser.parse(
            pro_report['project_dates']['last_change'])
        data['now'] = datetime.now(timezone.utc)
        return data
    else:
        return None


def __gather_language(pro_report):
    """
    The function gathers the language that is needed to calculate the impact of
    the project. The function prefers the git hub information and will fall back
    to our own results generated by a more primitive algorithm

    :param    pro_report:  The project report

    :returns: A dict containing the language or None if the information is not
              available
    """
    data = {}
    if('metadata_collector' in pro_report
            and 'main_language' in pro_report['metadata_collector']):
        data['main_language'] = pro_report[
            'metadata_collector']['main_language']
        return data
    # OR
    if ('languageDetector' in pro_report
            and 'main_language' in pro_report['languageDetector']):
        data['main_language'] = pro_report[
            'languageDetector']['main_language']
        return data
    return None


def __gather_needed_information(pro_report):
    '''
    The function gathers all needed information to calculate the impact of the
    library.

    :param    pro_report:  The project report

    :returns: A dict containing the needed information or  None if the
              information is not available
    '''
    author_contrib = __gather_autor_contrib(pro_report)
    project_dates = __gather_project_dates(pro_report)
    language = __gather_language(pro_report)

    if(author_contrib and project_dates and language):
        data = author_contrib
        data = {**data, **project_dates}
        data = {**data, **language}
        return data
    else:
        return None


def __calculate_impact(data):
    """
    Calculates the impact.

    :param    data:  The data needed to calculate the impact (author amount,
                     contrimubor amount, first change, last change)

    :returns: The impact of the project
    """
    language_weight = 1  # FIXME generate?

    contributor = data['contributor#']
    contributor_weight = 1/30  # TODO grab from task file

    author = data['author#']
    author_weight = 1/3  # TODO grab from task file

    last_change_age = (data['now'] - data['last_change']).days
    last_change_age_weight = 1  # TODO grab from task file

    project_age = (data['now'] - data['first_change']).days
    project_age_weight = 3  # TODO grab from task file

    return language_weight * (
        contributor_weight * contributor
        + author_weight * author
        + last_change_age_weight * (
            10 / pow(2, ((last_change_age / 90) - 1))
        )
        + project_age_weight * log10(project_age)
    )


def impact(report, task_params, global_args):
    """
    Example report scrab task

    :param    report:       The report to analyse _and_ change
    :param    task_params:  Parameter given explicitly for this task, for all
                            projects, defined in the task.yaml
    :param    global_args:  Arguments that will be passed to all tasks. They
                            _might_ contain something that is useful for the
                            task, but the task has to check if it is _there_ as
                            these are user provided. If they are needed to work
                            that check should happen in the argHandler.
    """
    for project in report['projects']:
        data = __gather_needed_information(report['projects'][project])
        if data:
            impact = __calculate_impact(data)
            report['projects'][project]['impact'] = {'impact': impact}
