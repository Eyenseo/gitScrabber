from datetime import datetime, timezone
from math import log10, pow
from dateutil import parser

name = "impact"
version = "1.0.0"


class ImpactCalculator():
    """
    Convenience class to calculate the impact for a single project

    :param    params:          The parameters given to the impact task
    :param    project_report:  The report for the specific project  that the
                               impact shall be calculated for
    """

    def __init__(self, params, project_report):
        self.__params = params
        self.__project_report = project_report

        self.__authors = None
        self.__authors_weight = 1/3
        self.__contributors = None
        self.__contributors_weight = 1/30
        self.__language_weight = None
        self.__last_change_age = None
        self.__last_change_age_weight = 1
        self.__project_age = None
        self.__project_age_weight = 3

        # FIXME think of real weights or generate them
        self.__language_weights = {
            'C++': 1,
            'C': 1,
            'Rust': 1,
            'Ruby': 1,
            'Java': 1,
            'Go': 1,
            'PHP': 1,
            'JavaScript': 1,
            'Objective-C': 1,
            'Swift': 1,
            'C#': 1,
            'Python': 1
        }

        self.__overwrite_weights()
        self.__gather_autor_contrib()
        self.__gather_project_dates()
        self.__gather_language_weight()

    def __overwrite_weights(self):
        """
        Checks and overwrites the default weights with the ones provided in the
        tasks.yaml file
        """
        if 'authors_weight' in self.__params:
            self.__authors_weight = self.__params['authors_weight']
        if 'contributors_weight' in self.__params:
            self.__contributors_weight = self.__params['contributors_weight']
        if 'last_change_age_weight' in self.__params:
            self.__last_change_age_weight = self.__params[
                'last_change_age_weight']
        if 'project_age_weight' in self.__params:
            self.__project_age_weight = self.__params['project_age_weight']
        if 'language_weights' in self.__params:
            self.__language_weights = {
                **self.__language_weights, **self.__params['language_weights']
            }

    def __gather_autor_contrib(self):
        """
        The function gathers the author and contributor amounts that are needed
        to calculate the impact of the project
        """
        report = None

        if 'author_contributor_counter' in self.__project_report:
            report = self.__project_report['author_contributor_counter']
        else:
            return

        if 'author#' in report and 'contributor#' in report:
            self.__authors = report['author#']
            self.__contributors = report['contributor#']

    def __gather_project_dates(self):
        """
        The function gathers the first and last change dates that are needed to
        calculate the impact of the project
        """
        report = None
        if 'project_dates' in self.__project_report:
            report = self.__project_report['project_dates']
        else:
            return

        if 'first_change' in report and 'last_change' in report:
            self.__project_age = (
                datetime.now(timezone.utc)
                - parser.parse(report['first_change'])
            ).days
            self.__last_change_age = (
                datetime.now(timezone.utc)
                - parser.parse(report['last_change'])
            ).days

    def __gather_language_weight(self):
        """
        The function gathers the language that is needed to calculate the impact
        of the project. The function prefers the git hub information and will
        fall back to our own results generated by a more primitive algorithm
        """
        report = None

        if 'metadata_collector' in self.__project_report:
            report = self.__project_report['metadata_collector']
        elif 'languageDetector' in self.__project_report:
            report = self.__project_report['languageDetector']
        else:
            return

        if 'main_language' in report:
            self.__language_weight = self.__language_weights[
                report['main_language']]

    def calculatable(self):
        '''
        Checks weather all information is available to calculate the impact for
        the given project

        :returns: True if all necessary information is present False otherwise
        '''
        return (self.__authors and self.__contributors
                and self.__language_weight and self.__last_change_age
                and self.__project_age)

    def calculate_impact(self):
        """
        Calculates the impact for the given project

        :returns: The impact of the project, NaN is case not all required
                  information is available in the given project report
        """
        if not self.calculatable():
            return float('NaN')

        return self.__language_weight * (
            self.__contributors_weight * self.__contributors
            + self.__authors_weight * self.__authors
            + self.__last_change_age_weight * (
                10 / pow(2, ((self.__last_change_age / 90) - 1))
            )
            + self.__project_age_weight * log10(self.__project_age)
        )


def impact(report, task_params, global_args):
    """
    The scrab task calculates for all projects in the report the impact.

    :param    report:       The report to analyse _and_ change
    :param    task_params:  The following weights may be given as a float:
                            * 'authors_weight'
                            * 'contributors_weight'
                            * 'last_change_age_weight'
                            * 'project_age_weight'

                            The 'language_weights' may be given as a dict
                            eg.: {'C++': 0.111}
    :param    global_args:  Arguments that will be passed to all tasks. They
                            _might_ contain something that is useful for the
                            task, but the task has to check if it is _there_ as
                            these are user provided. If they are needed to work
                            that check should happen in the argHandler.
    """
    for project in report['projects']:
        imp = ImpactCalculator(task_params, report['projects'][project])

        if imp.calculatable():
            report['projects'][project]['impact'] = {
                'impact': imp.calculate_impact()
            }
